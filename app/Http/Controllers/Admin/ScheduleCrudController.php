<?php
/**
 * Created by PhpStorm.
 * User: Ivan
 * Date: 26-Apr-18
 * Time: 13:14
 */

namespace App\Http\Controllers\Admin;

use Carbon\Carbon;
use App\Models\Cohort;
use App\Models\Lesson;
use App\Models\Module;
use App\Models\Session;
use App\Models\Resource;
use App\Models\Schedule;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use PhpParser\Node\Expr\AssignOp\Mod;
use App\Http\Requests\Admin\ScheduleCrudRequest;
use Backpack\CRUD\app\Http\Controllers\CrudController;
use App\Http\Requests\Admin\ScheduleCrudRequest as StoreRequest;
use App\Http\Requests\Admin\ScheduleCrudRequest as UpdateRequest;


class ScheduleCrudController extends CrudController
{

    public function setup()
    {
        $this->crud->setModel('App\Models\Schedule');
        $this->crud->setRoute('admin/schedule');
        $this->crud->setEntityNameStrings('schedule', 'schedules');
        $this->crud->setCreateView('lms/admin/schedule_create');
        $this->crud->setEditView('lms/admin/schedule_edit');

        //getting a list of all courses
        $courses = \App\Models\Course::all()->pluck('title', 'id')->toArray();
     
        //clearing the HTML tags from the names
        foreach ($courses as $key => $value) {
            $courses[$key] = strip_tags($value);
        }

        $this->crud->setColumns([
            [
                'name' => 'id',
                'label' => 'ID'
            ],
            [
                'name' => 'name',
                'label' => 'Name'
            ],
            [
                'label' => 'Course',
                'type' => 'model_function',
                'function_name' => 'admin_course_link'
            ],
            [
                'name' => 'schedule_type',
                'label' => 'Schedule Type'
            ],
            [
                'name' => 'status',
                'label' => 'Status'
            ]
        ]);
    } //setup



    public function store(StoreRequest $request)
    {
        //dd($request->all());
        $schedule_dayzero = !is_null($request->input('day_zero')) ? Carbon::createFromFormat('m/d/Y g:i A', $request->input('day_zero'))->format('Y-m-d H:i:s') : $request->input('day_zero');
        //dd("schedule_dayzero =" . $schedule_dayzero);

        $modules = $request->input('modules');
        $modulestp = $request->input('modulestp');
        $lessons = $request->input('lessons');
        $lessonstp = $request->input('lessonstp');
        $sessions = $request->input('sessions');
        $sessionstp = $request->input('sessionstp');
        $resources = $request->input('resources');
        $resourcestp = $request->input('resourcestp');
        //
        $videos = $request->input('videos');
        $videostp = $request->input('videostp');
        $learns = $request->input('learns');
        $learnstp = $request->input('learnstp');
        //
        $name = $request->input('name');
        $schedule_type = $request->input('schedule_type');
        $cohort_ids = $request->input('cohorts');
        $autocompleteSession = $request->input('optradio');
        /*return parent::storeCrud(); // TODO: Change the autogenerated stub*/

        $schedule = new Schedule();
        $schedule->name = $name;
        $schedule->course_id = $request->input('course_id');
        $schedule->schedule_type = $request->input('schedule_type');
        $schedule->day_zero = $schedule_dayzero;
        $schedule->save();

        foreach ($cohort_ids as $cohort_id) {
            $cohort = Cohort::find($cohort_id);

            if ($cohort->schedule()->exists())
            {
                if (count($cohort_ids) == 1) {
                    \Alert::error($cohort->name . ' already has a schedule. Edit the existing one.')->flash();
                    $schedule->delete();
                    return redirect('/admin/schedule');
                }
                \Alert::warning($cohort->name . ' already has a schedule. Edit the existing one.')->flash();
                continue;
            }//if-already-exists
            $cohort->schedule_id = $schedule->id;
            $cohort->save();
        } //cohort



        foreach ($modules as $key => $value)
        {
            $schedule->modules()->attach(Module::find($key));

            DB::table('schedulables')
                ->where([
                    ['schedule_id', $schedule->id],
                    ['schedulable_id', $key],
                    ['schedulable_type', "App\Models\Module"]
                ])
                ->update($schedule_type === "dripped" ? [
                    'drip_days' => $value,
                    'drip_time' => $modulestp[$key]
                ] : [
                        'lock_date' => date("Y-m-d H:i:s", strtotime($value))
                    ]);

        } //for-modules

        if (!empty($lessons)) {
            foreach ($lessons as $key => $value) {
                $schedule->lessons()->attach(Lesson::find($key));

                DB::table('schedulables')
                    ->where([
                        ['schedule_id', $schedule->id],
                        ['schedulable_id', $key],
                        ['schedulable_type', "App\Models\Lesson"]
                    ])
                    ->update($schedule_type === "dripped" ? [
                        'drip_days' => $value,
                        'drip_time' => $lessonstp[$key]
                    ] : [
                            'lock_date' => date("Y-m-d H:i:s", strtotime($value))
                        ]);

            }//for
        } //lessons

        if (!empty($sessions)) {
            foreach ($sessions as $key => $value) {
                $schedule->sessions()->attach(Session::find($key));
                /*Session::where('id', $key)->update([
                    'schedule_id' => $schedule->id
                ]);
                // juan codigo quita lo everGreen pues hace que la session pertenezca solo a un schedule_id
                */
    
                if ($autocompleteSession === "no") {
                    // se traduce si es withoutSessions continue, es decir
                    // deje session en null
                    //$lesson_id = Session::find($key)->lesson->id;
                    //$value = $lessons[$lesson_id];
                }

                DB::table('schedulables')
                    ->where([
                        ['schedule_id', $schedule->id],
                        ['schedulable_id', $key],
                        ['schedulable_type', "App\Models\Session"]
                    ])
                    ->update($schedule_type === "dripped" ? [
                        'drip_days' => $value,
                        'drip_time' => $sessionstp[$key]
                    ] : [
                            'lock_date' => date("Y-m-d H:i:s", strtotime($value))
                        ]);
            } //for
        } //sessions


        if (!empty($resources)) {
            foreach ($resources as $key => $value) {
                $schedule->resources()->attach(Resource::find($key));

                DB::table('schedulables')
                    ->where([
                        ['schedule_id', $schedule->id],
                        ['schedulable_id', $key],
                        ['schedulable_type', "App\Models\Resource"]
                    ])
                    ->update($schedule_type === "dripped" ? [
                        'drip_days' => $value,
                        'drip_time' => $resourcestp[$key]
                    ] : [
                            'lock_date' => date("Y-m-d H:i:s", strtotime($value))
                        ]);     
            } //for
        } //resources

        if (!empty($videos)) {
            foreach ($videos as $key => $value) {
                $insertArr = [
                    'schedule_id' => $schedule->id,
                    'schedulable_id' => $key,
                    'schedulable_type' => "App\Models\SessionVideo"
                ];

                if ($schedule_type === "dripped"){
                   $insertArr['drip_days'] = $value;
                   $insertArr['drip_time'] = $videostp[$key]; 
                }else{
                   $insertArr['lock_date'] = date("Y-m-d H:i:s", strtotime($value));
                }
                DB::table('schedulables')->insert($insertArr);
            } //for
        } //videos

        if (!empty($learns)) {
            foreach ($learns as $key => $value) {
                $insertArr = [
                    'schedule_id' => $schedule->id,
                    'schedulable_id' => $key,
                    'schedulable_type' => "App\Models\SessionLearn"
                ];

                if ($schedule_type === "dripped") {
                    $insertArr['drip_days'] = $value;
                    $insertArr['drip_time'] = $learnstp[$key];
                } else {
                    $insertArr['lock_date'] = date("Y-m-d H:i:s", strtotime($value));
                }
                DB::table('schedulables')->insert($insertArr);
            } //for
        } //learns


        $log = new \App\Models\Log;
        $log->user_id = Auth::user()->id;
        $log->action_id = 14;
        $log->activity_id = 7;
        $log->save();

        $schedule->logs()->save($log);

        \Alert::success(trans('backpack::crud.insert_success'))->flash();

        return redirect('/admin/schedule');

    } // fn-store

    public function update(UpdateRequest $request, $id)
    {

        //dd($request->all());
        $schedule_dayzero = !is_null($request->input('day_zero')) ?  Carbon::createFromFormat('m/d/Y g:i A', $request->input('day_zero'))->format('Y-m-d H:i:s') : $request->input('day_zero');
        //dd("schedule_dayzero =". $schedule_dayzero);

        $modules = $request->input('modules');
        $modulestp = $request->input('modulestp');
        $lessons = $request->input('lessons');
        $lessonstp = $request->input('lessonstp');
        $sessions = $request->input('sessions');
        $sessionstp = $request->input('sessionstp');
        $resources = $request->input('resources');
        $resourcestp = $request->input('resourcestp');
        //
        $videos = $request->input('videos');
        $videostp = $request->input('videostp');
        $learns = $request->input('learns');
        $learnstp = $request->input('learnstp');
        //
        $name = $request->input('name');
        $schedule_type = $request->input('schedule_type');
        $cohort_ids = $request->input('cohorts');
        $autocompleteSession = $request->input('optradio');

        $schedule = Schedule::find($id);
        $schedule->name = $name;
        $schedule->schedule_type = $schedule_type;
        $schedule->day_zero= $schedule_dayzero;
        $schedule->update();

       
        if ($schedule->status !== "default")
        {
            $current_cohorts = $schedule->cohorts->pluck('id')->toArray();
            $cohorts_to_remove = array_diff($current_cohorts, $cohort_ids);
            $cohorts_to_add = array_diff($cohort_ids, $current_cohorts);

            foreach ($cohorts_to_remove as $cohort_id) {
                $cohort = Cohort::find($cohort_id);
                $cohort->schedule_id = null;
                $cohort->save();
            }

            foreach ($cohorts_to_add as $cohort_id) {
                $cohort = Cohort::find($cohort_id);
                $cohort->schedule_id = $id;
                $cohort->save();
            }
        } //cohort

        // If the scheduled type is dripped update the drip_days column else update the lock_date column
        if ($schedule_type === "dripped") {
            $column = "drip_days";
            $emptyColumn = "lock_date";
        } else {
            $column = "lock_date";
            $emptyColumn = "drip_days";
        }

        foreach ($modules as $key => $value){
            if ($schedule_type === "locked") {
                $value = date("Y-m-d H:i:s", strtotime($value));
            }
            $updateData = [
                $column => $value,
                $emptyColumn => null,
            ];
            if ($column === "drip_days") {
                $updateData['drip_time'] = $modulestp[$key];
            }
            DB::table('schedulables')
                ->where([
                    ['schedule_id', $id],
                    ['schedulable_id', $key],
                    ['schedulable_type', "App\Models\Module"]
                ])
                ->update($updateData);
        } //modules-update

      
        if (!empty($lessons)){
            foreach ($lessons as $key => $value)
            {
                if ($schedule_type === "locked") {
                    $value = date("Y-m-d H:i:s", strtotime($value));
                }
                $updateData = [
                    $column => $value,
                    $emptyColumn => null,
                ];
                if ($column === "drip_days") {
                    $updateData['drip_time'] = $lessonstp[$key];
                }
                DB::table('schedulables')
                    ->where([
                        ['schedule_id', $id],
                        ['schedulable_id', $key],
                        ['schedulable_type', "App\Models\Lesson"]
                    ])
                    ->update($updateData);
            }
        } // lessons-update

        
        if (!empty($sessions)){
            foreach ($sessions as $key => $value)
            {
                if ($autocompleteSession === "no") {
                    //juan , comenté creo que eso $value 
                    //$lesson_id = Session::find($key)->lesson->id;
                    //dd("lesson_id",$lesson_id);
                    //$value = $lessons[$lesson_id];
                    //dd("autocompleteSession==no: ",$value);
                }

                if ($schedule_type === "locked") {
                    $value = date("Y-m-d H:i:s", strtotime($value));
                }
                $updateData = [
                    $column => $value,
                    $emptyColumn => null,
                ];
                if ($column === "drip_days") {
                    $updateData['drip_time'] = $sessionstp[$key];
                }
                DB::table('schedulables')
                    ->where([
                        ['schedule_id', $id],
                        ['schedulable_id', $key],
                        ['schedulable_type', "App\Models\Session"]
                    ])
                    ->update($updateData);
            } //for
        } // sessions-update


        if (!empty($resources)){
            foreach ($resources as $key => $value)
            {
                if ($schedule_type === "locked") {
                    $value = date("Y-m-d H:i:s", strtotime($value));
                }
                $updateData = [
                    $column => $value,
                    $emptyColumn => null,
                ];
                if ($column === "drip_days") {
                    $updateData['drip_time'] = $resourcestp[$key];
                }
                DB::table('schedulables')
                    ->where([
                        ['schedule_id', $id],
                        ['schedulable_id', $key],
                        ['schedulable_type', "App\Models\Resource"]
                    ])
                    ->update($updateData);
            } //for
        } //resources-update 

        if (!empty($videos)) {
            foreach ($videos as $key => $value) {
                if ($schedule_type === "locked") {
                    $value = date("Y-m-d H:i:s", strtotime($value));
                }
                $updateData = [
                    $column => $value,
                    $emptyColumn => null,
                ];
                if ($column === "drip_days") {
                    $updateData['drip_time'] = $videostp[$key];
                }
                DB::table('schedulables')
                    ->where([
                        ['schedule_id', $id],
                        ['schedulable_id', $key],
                        ['schedulable_type', "App\Models\SessionVideo"]
                    ])
                    ->update($updateData);
            } //for
        } //videos-update

        if (!empty($learns)) {
            foreach ($learns as $key => $value) {
                if ($schedule_type === "locked") {
                    $value = date("Y-m-d H:i:s", strtotime($value));
                }
                $updateData = [
                    $column => $value,
                    $emptyColumn => null,
                ];
                if ($column === "drip_days") {
                    $updateData['drip_time'] = $learnstp[$key];
                }
                DB::table('schedulables')
                    ->where([
                        ['schedule_id', $id],
                        ['schedulable_id', $key],
                        ['schedulable_type', "App\Models\SessionLearn"]
                    ])
                    ->update($updateData);
            } //for
        } //learns-update 


        $log = new \App\Models\Log;
        $log->user_id = Auth::user()->id;
        $log->action_id = 8;
        $log->activity_id = 7;
        $log->save();

        $schedule->logs()->save($log);

        \Alert::success(trans('backpack::crud.update_success'))->flash();

        return redirect('/admin/schedule');
    } // fn-update

    public function destroy($id)
    {
        $schedule = Schedule::find($id);

        foreach (Cohort::where('schedule_id', $id)->get() as $cohort) {
            $cohort->schedule_id = null;
            $cohort->save();
        }

        $schedule->modules()->detach();
        $schedule->lessons()->detach();
        $schedule->sessions()->detach();
        $schedule->resources()->detach();

        $log = new \App\Models\Log;
        $log->user_id = Auth::user()->id;
        $log->action_id = 13;
        $log->activity_id = 7;
        $log->save();

        $schedule->logs()->save($log);

        return parent::destroy($id); // TODO: Change the autogenerated stub
    }

}