<?php
/**
 * Created by PhpStorm.
 * User: Ivan
 * Date: 26-Apr-18
 * Time: 13:14
 */

namespace App\Http\Controllers\Admin;

use App\Http\Requests\Admin\ScheduleCrudRequest;
use App\Models\Cohort;
use Backpack\CRUD\app\Http\Controllers\CrudController;
use App\Http\Requests\Admin\ScheduleCrudRequest as StoreRequest;
use App\Http\Requests\Admin\ScheduleCrudRequest as UpdateRequest;
use App\Models\Schedule;
use App\Models\Module;
use App\Models\Lesson;
use Illuminate\Support\Facades\DB;
use PhpParser\Node\Expr\AssignOp\Mod;


class ScheduleCrudController extends CrudController
{

    public function setup()
    {
        $this->crud->setModel('App\Models\Schedule');
        $this->crud->setRoute('admin/schedule');
        $this->crud->setEntityNameStrings('schedule', 'schedules');
        $this->crud->setCreateView('lms/admin/schedule_create');
        $this->crud->setEditView('lms/admin/schedule_edit');


        //getting a list of all courses
        $courses = \App\Models\Course::all()->pluck('title','id')->toArray();

        //clearing the HTML tags from the names
        foreach ($courses as $key => $value) {
            $courses[$key] = strip_tags($value);
        }


        $this->crud->setColumns([
            [
                'name' => 'id',
                'label' => 'ID'
            ],
            [
                'name' => 'name',
                'label' => 'Name'
            ],
            /*[
                'label' => 'Course',
                'type' => 'model_function',
                'function_name' => 'admin_course_link'
            ],*/
            [
                'name' => 'schedule_type',
                'label' => 'Schedule Type'
            ],
            [
                'name' => 'status',
                'label' => 'Status'
            ]
        ]);
    }

    public function store(StoreRequest $request)
    {
        $modules = $request->input('modules');
        $lessons = $request->input('lessons');
        $name = $request->input('name');
        $schedule_type = $request->input('schedule_type');
        $cohort_ids = $request->input('cohorts');

        /*return parent::storeCrud(); // TODO: Change the autogenerated stub*/

        $schedule = new Schedule();
        $schedule->name = $name;
        $schedule->course_id = $request->input('course_id');
        $schedule->schedule_type = $request->input('schedule_type');
        $schedule->save();

        foreach ($cohort_ids as $cohort_id) {
            $cohort = Cohort::find($cohort_id);

            if ($cohort->schedule()->exists()) {

                if (count($cohort_ids) == 1) {
                    \Alert::error($cohort->name.' already has a schedule. Edit the existing one.')->flash();

                    $schedule->delete();

                    return redirect('/admin/schedule');
                }

                \Alert::warning($cohort->name.' already has a schedule. Edit the existing one.')->flash();

                continue;
            }

            $cohort->schedule_id = $schedule->id;
            $cohort->save();
        }



        foreach ($modules as $key => $value) {
            $schedule->modules()->attach(Module::find($key));

            if ($schedule_type === "dripped") {
                DB::table('schedulables')
                    ->where([
                        ['schedule_id',$schedule->id],
                        ['schedulable_id',$key],
                        ['schedulable_type',"App\Models\Module"]
                    ])
                    ->update([
                        'drip_days' => $value
                    ]);
            }
            else {
                DB::table('schedulables')
                    ->where([
                        ['schedule_id',$schedule->id],
                        ['schedulable_id',$key],
                        ['schedulable_type',"App\Models\Module"]
                    ])
                    ->update([
                        'lock_date' => date("Y-m-d h:i:s", strtotime($value))
                    ]);
            }


        }

        if (!empty($lessons)) {
            foreach ($lessons as $key => $value) {
                $schedule->lessons()->attach(Lesson::find($key));

                if ($schedule_type === "dripped") {
                    DB::table('schedulables')
                        ->where([
                            ['schedule_id',$schedule->id],
                            ['schedulable_id',$key],
                            ['schedulable_type',"App\Models\Lesson"]
                        ])
                        ->update([
                            'drip_days' => $value
                        ]);
                }
                else {
                    DB::table('schedulables')
                        ->where([
                            ['schedule_id',$schedule->id],
                            ['schedulable_id',$key],
                            ['schedulable_type',"App\Models\Lesson"]
                        ])
                        ->update([
                            'lock_date' => date("Y-m-d h:i:s", strtotime($value))
                        ]);
                }
            }
        }

        \Alert::success(trans('backpack::crud.insert_success'))->flash();

        return redirect('/admin/schedule');

    }

    public function update(UpdateRequest $request,$id)
    {

        $modules = $request->input('modules');
        $lessons = $request->input('lessons');
        $name = $request->input('name');
        $schedule_type = $request->input('schedule_type');
        $cohort_ids = $request->input('cohorts');

        $schedule = Schedule::find($id);
        $schedule->name = $name;
        $schedule->schedule_type = $schedule_type;
        $schedule->save();
        $current_cohorts = $schedule->cohorts->pluck('id')->toArray();
        $cohorts_to_remove = array_diff($current_cohorts,$cohort_ids);
        $cohorts_to_add = array_diff($cohort_ids,$current_cohorts);
        
        if ($schedule->status !== "default") {
            foreach ($cohorts_to_remove as $cohort_id) {
                $cohort = Cohort::find($cohort_id);
                $cohort->schedule_id = null;
                $cohort->save();
            }

            foreach ($cohorts_to_add as $cohort_id) {
                $cohort = Cohort::find($cohort_id);
                $cohort->schedule_id = $id;
                $cohort->save();
            }
        }

        // If the scheduled type is dripped update the drip_days column else update the lock_date column
        if ($schedule_type === "dripped") {
            $column = "drip_days";
            $emptyColumn = "lock_date";
        } else {
            $column = "lock_date";
            $emptyColumn = "drip_days";
        }

        foreach ($modules as $key => $value) {

            if ($schedule_type === "locked") {
                $value = date("Y-m-d h:i:s", strtotime($value));
            }

            DB::table('schedulables')
                ->where([
                    ['schedule_id',$id],
                    ['schedulable_id', $key],
                    ['schedulable_type',"App\Models\Module"]
                ])
                ->update([
                    $column => $value,
                    $emptyColumn => null
                ]);
        }

        if (!empty($lessons)) {
            foreach ($lessons as $key => $value) {

                if ($schedule_type === "locked") {
                    $value = date("Y-m-d h:i:s", strtotime($value));
                }

                DB::table('schedulables')
                    ->where([
                        ['schedule_id',$id],
                        ['schedulable_id', $key],
                        ['schedulable_type',"App\Models\Lesson"]
                    ])
                    ->update([
                        $column =>  $value,
                        $emptyColumn => null
                    ]);
            }
        }

        \Alert::success(trans('backpack::crud.update_success'))->flash();

        return redirect('/admin/schedule');
    }

    public function destroy($id)
    {
        $schedule = Schedule::find($id);

        foreach (Cohort::where('schedule_id',$id)->get() as $cohort) {
            $cohort->schedule_id = null;
            $cohort->save();
        }

        $schedule->modules()->detach();
        $schedule->lessons()->detach();

        return parent::destroy($id); // TODO: Change the autogenerated stub
    }

}