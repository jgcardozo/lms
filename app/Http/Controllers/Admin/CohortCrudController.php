<?php

namespace App\Http\Controllers\Admin;

use App\Http\Requests\Admin\CohortsCrudRequest as StoreRequest;
use App\Http\Requests\Admin\CohortsCrudRequest as UpdateRequest;
use App\Models\Course;
use Backpack\CRUD\app\Http\Controllers\CrudController;

class CohortCrudController extends CrudController
{

	public function setup()
	{
		$this->crud->setModel('App\Models\Cohort');
		$this->crud->setRoute('admin/cohort');
		$this->crud->setEntityNameStrings('cohort', 'cohorts');

		/**
		 * Define CRUD list columns
		 */
		$this->crud->setColumns([
			[
				'name' => 'id',
				'label' => 'ID'
			],
            [
                'name' => 'name',
                'label' => 'Name'
			],
			[
                'label' => 'Course',
                'type' => 'model_function',
                'function_name' => 'admin_course_link'
            ]
		]);

		/**
		 * Add CRUD fields
		 */
		$this->crud->addField([
			'name' => 'name',
			'label' => 'Name'
		]);

		
        $this->crud->addField([  // Select2
            'label' => "Course",
            'type' => 'select2',
            'name' => 'course_id', // the db column for the foreign key
            'entity' => 'course', // the method that defines the relationship in your Model
            'attribute' => 'title', // foreign key attribute that is shown to user
            'model' => "App\\Models\\Course", // foreign key model
			'attributes' => [
        		'data-order' => '{"column": "title", "direction": "asc"}', // ordena los elementos por tÃ­tulo en orden ascendente
    		]
		]); 

        $this->crud->addField([  // Select2
            'label' => "Schedule",
            'type' => 'select2',
            'name' => 'schedule_id', // the db column for the foreign key
            'entity' => 'schedule', // the method that defines the relationship in your Model
            'attribute' => 'name', // foreign key attribute that is shown to user
            'model' => "App\\Models\\Schedule", // foreign key model
			'options' => function ($query, $id, $value) {
				return $query->orderBy('name', 'asc')->pluck('name', 'id');
			}
        ]);
	}

	public function store(StoreRequest $request)
	{
		return parent::storeCrud();
	}

	public function update(UpdateRequest $request)
	{
		return parent::updateCrud();
	}

	public function destroy($id)
    {
        $cohort = \App\Models\Cohort::findOrFail($id);
        $cohort->users()->detach();

        return parent::destroy($id); // TODO: Change the autogenerated stub
    }
}
